import { Schema } from "effect";

export const JobAdSearchParams = Schema.Struct({
  q: Schema.optional(Schema.String),
  "published-after": Schema.optional(Schema.String),
  "published-before": Schema.optional(Schema.String),
  "occupation-name": Schema.optional(Schema.Array(Schema.String)),
  "occupation-group": Schema.optional(Schema.Array(Schema.String)),
  "occupation-field": Schema.optional(Schema.Array(Schema.String)),
  "occupation-collection": Schema.optional(Schema.Array(Schema.String)),
  skill: Schema.optional(Schema.Array(Schema.String)),
  language: Schema.optional(Schema.Array(Schema.String)),
  "worktime-extent": Schema.optional(Schema.Array(Schema.String)),
  "parttime.min": Schema.optional(Schema.Number),
  "parttime.max": Schema.optional(Schema.Number),
  "driving-license-required": Schema.optional(Schema.Boolean),
  "driving-license": Schema.optional(Schema.Array(Schema.String)),
  "employment-type": Schema.optional(Schema.Array(Schema.String)),
  experience: Schema.optional(Schema.Boolean),
  municipality: Schema.optional(Schema.Array(Schema.String)),
  region: Schema.optional(Schema.Array(Schema.String)),
  country: Schema.optional(Schema.Array(Schema.String)),
  "unspecified-sweden-workplace": Schema.optional(Schema.Boolean),
  abroad: Schema.optional(Schema.Boolean),
  remote: Schema.optional(Schema.Boolean),
  open_for_all: Schema.optional(Schema.Boolean),
  trainee: Schema.optional(Schema.Boolean),
  larling: Schema.optional(Schema.Boolean),
  franchise: Schema.optional(Schema.Boolean),
  "hire-work-place": Schema.optional(Schema.Boolean),
  position: Schema.optional(Schema.Array(Schema.String)),
  "position.radius": Schema.optional(Schema.Array(Schema.Number)),
  employer: Schema.optional(Schema.Array(Schema.String)),
  qfields: Schema.optional(Schema.Array(Schema.String)),
  duration: Schema.optional(Schema.Array(Schema.String)),
  "relevance-threshold": Schema.optional(Schema.Number),
  resdet: Schema.optional(Schema.Literal("full", "brief")),
  offset: Schema.optional(Schema.Number),
  limit: Schema.optional(Schema.Number),
  sort: Schema.optional(Schema.Literal("relevance", "pubdate-desc", "pubdate-asc", "applydate-desc", "applydate-asc", "updated", "id")),
  stats: Schema.optional(Schema.Array(Schema.String)),
  "stats.limit": Schema.optional(Schema.Number),
  label: Schema.optional(Schema.Array(Schema.String)),
});

export const TypeaheadParams = Schema.Struct({
  q: Schema.optional(Schema.String),
  limit: Schema.optional(Schema.Number),
  contextual: Schema.optional(Schema.Boolean),
  label: Schema.optional(Schema.Array(Schema.String)),
});