/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as appRouteRouteImport } from './routes/(app)/route'
import { Route as appIndexRouteImport } from './routes/(app)/index'
import { Route as authRegisterRouteImport } from './routes/(auth)/register'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as appCvTestRouteImport } from './routes/(app)/cv-test'
import { Route as appCvRouteImport } from './routes/(app)/cv'
import { Route as appJobIndexRouteImport } from './routes/(app)/job/index'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'

const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const appRouteRoute = appRouteRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const appIndexRoute = appIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appRouteRoute,
} as any)
const authRegisterRoute = authRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => authRouteRoute,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)
const appCvTestRoute = appCvTestRouteImport.update({
  id: '/cv-test',
  path: '/cv-test',
  getParentRoute: () => appRouteRoute,
} as any)
const appCvRoute = appCvRouteImport.update({
  id: '/cv',
  path: '/cv',
  getParentRoute: () => appRouteRoute,
} as any)
const appJobIndexRoute = appJobIndexRouteImport.update({
  id: '/job/',
  path: '/job/',
  getParentRoute: () => appRouteRoute,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof appIndexRoute
  '/cv': typeof appCvRoute
  '/cv-test': typeof appCvTestRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/job': typeof appJobIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof appIndexRoute
  '/cv': typeof appCvRoute
  '/cv-test': typeof appCvTestRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/job': typeof appJobIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(app)': typeof appRouteRouteWithChildren
  '/(auth)': typeof authRouteRouteWithChildren
  '/(app)/cv': typeof appCvRoute
  '/(app)/cv-test': typeof appCvTestRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/(app)/': typeof appIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/(app)/job/': typeof appJobIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cv'
    | '/cv-test'
    | '/login'
    | '/register'
    | '/api/auth/$'
    | '/job'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/cv' | '/cv-test' | '/login' | '/register' | '/api/auth/$' | '/job'
  id:
    | '__root__'
    | '/(app)'
    | '/(auth)'
    | '/(app)/cv'
    | '/(app)/cv-test'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/(app)/'
    | '/api/auth/$'
    | '/(app)/job/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  appRouteRoute: typeof appRouteRouteWithChildren
  authRouteRoute: typeof authRouteRouteWithChildren
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(app)/cv-test': {
      id: '/(app)/cv-test'
      path: '/cv-test'
      fullPath: '/cv-test'
      preLoaderRoute: typeof appCvTestRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/cv': {
      id: '/(app)/cv'
      path: '/cv'
      fullPath: '/cv'
      preLoaderRoute: typeof appCvRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/job/': {
      id: '/(app)/job/'
      path: '/job'
      fullPath: '/job'
      preLoaderRoute: typeof appJobIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface appRouteRouteChildren {
  appCvRoute: typeof appCvRoute
  appCvTestRoute: typeof appCvTestRoute
  appIndexRoute: typeof appIndexRoute
  appJobIndexRoute: typeof appJobIndexRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appCvRoute: appCvRoute,
  appCvTestRoute: appCvTestRoute,
  appIndexRoute: appIndexRoute,
  appJobIndexRoute: appJobIndexRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

interface authRouteRouteChildren {
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  appRouteRoute: appRouteRouteWithChildren,
  authRouteRoute: authRouteRouteWithChildren,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
